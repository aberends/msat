<?xml version='1.0' encoding='utf-8' ?>
<!DOCTYPE chapter PUBLIC "-//OASIS//DTD DocBook XML V4.5//EN" "http://www.oasis-open.org/docbook/xml/4.5/docbookx.dtd" [
<!ENTITY % BOOK_ENTITIES SYSTEM "msat-guide.ent">
%BOOK_ENTITIES;
]>
<chapter id="chap-msat-guide-MSAT_scripts">
	<title>MSAT scripts</title>
	 <para>
		This chapter discusses how we use the Satellite API and what software we use to build the Meta SATellite (MSAT) scripts.
	</para>
	 <para>
		We start by explaining the data model we use for the Satellite data objects. Their relations are shown in <xref linkend="figu-msat-guide-MSAT_scripts-Simplified_Satellite_data_model" />. 
		<figure id="figu-msat-guide-MSAT_scripts-Simplified_Satellite_data_model">
			<title>Simplified Satellite data model</title>
			 <mediaobject>
				<imageobject>
					<imagedata align="center" contentdepth="100%" fileref="images/sat_data_model.svg" format="SVG" scalefit="1" valign="middle" width="100%" />
				</imageobject>
				 <imageobject role="html">
					<imagedata align="center" contentdepth="200%" fileref="images/sat_data_model.png" format="PNG" scalefit="1" valign="middle" width="100%" />
				</imageobject>
				 <textobject role="text">
					
<screen>
        +----+     +----+
        | kp |--+--| sc |
        +----+  |  +----+
                |
                |  +----+
                +--|rpm |
                |  +----+
                |
                |  +----+     +----+
                +--| ak |--+--|rpm |
                |  +----+  |  +----+
                |          |
                |          |  +----+
                |          +--| sc |
                |          |  +----+
                |          |
                |          |  +----+     +----+
                |          +--| cc |-----| cf |
                |             +----+     +----+
                |
                |  +----+     +----+
                +--| cs |-----| cs |
                   +----+     +----+
</screen>

				</textobject>
			</mediaobject>

		</figure>

	</para>
	 <para>
		Some points to understand in the data model: 
		<variablelist>
			<varlistentry>
				<term>kickstart profile</term>
				 <listitem>
					<para>
						The kickstart profile determines the kickstart file used for installation of a system. Because some extra scripting code is added by the Satellite server, also the configuration from the Satellite server is deployed on the installing system. Hence, the kickstart profile determines the system type. Per type of system, only one kickstart profile exists.
					</para>

				</listitem>

			</varlistentry>
			 <varlistentry>
				<term>software channel</term>
				 <listitem>
					<para>
						A software channel is a container for RPM's on the Satellite. The base channel as specified by the kickstart profile, determines what RHEL major version is installed on the system. A base channel may have a number of child channels on a system. This way a hierarchy of software packages can be defined on the Satellite for specific type of installations. Always exactly one base channel is connected to the kickstart profile.
					</para>
					 <para>
						On the Satellite server it is possible to clone software channels. This has the advantage, that in practise the software channel is frozen. Only if the administrator manually adds RPM's, the contents of the software channel changes.
					</para>

				</listitem>

			</varlistentry>
			 <varlistentry>
				<term>RPM</term>
				 <listitem>
					<para>
						An RPM is a RPM Package Manager software packet. During installation of a system, RPM's are installed on it to provide the needed software. The RPM box here is mentioned because it illustrates that it is possible to install extra software packages via either a kickstart profile, or activation keys.
					</para>
					 <para>
						It is also possible to install an RPM from the post install script, or cobbler snippet. We try to avoid that, since it is not that apparent. So, RPM's must be defined in the activation keys. Only if installation must be avoided, the must be set in the kickstart profile, prefixed with a '-' sign. For example: <code>-bluez-utils</code>.
					</para>

				</listitem>

			</varlistentry>
			 <varlistentry>
				<term>activation key</term>
				 <listitem>
					<para>
						An activation key, is a container for RPM's, config channels, and list of possible child channels to subscribe to. It is referenced by the kickstart profile. A kickstart profile can reference 0 or more activation keys.
					</para>
					 <para>
						Unfortunately, it is not possible to give an order to the referenced activation keys. Therefore, no way exists to give precedence to config channels that may contain the same <filename>filename</filename>.
					</para>

				</listitem>

			</varlistentry>
			 <varlistentry>
				<term>cobbler snippet</term>
				 <listitem>
					<para>
						A cobbler snippet is a piece of script code. Normally it is <command>bash</command> code. Cobbler snippets provide a way to modularize the the pre/post install scripts. A piece of scripting code is given a name so that it can be reused in other snippets or in other scripts (of other kickstart profiles). Cobbler snippets may exist, but it is not necessary, hence the '*' character in the relation line.
					</para>
					 <para>
						In the figure, <xref linkend="figu-msat-guide-MSAT_scripts-Simplified_Satellite_data_model" />, a second rounded box with "cobbler snippet" is drawn. This means that from a cobbler snippet another cobbler snippet can be referenced. This can nest deeply!
					</para>

				</listitem>

			</varlistentry>
			 <varlistentry>
				<term>child channel</term>
				 <listitem>
					<para>
						A child channel is a software channel. It is a child of the base channel. A base channel is for example rhel-server-6, which means: Red Hat Enterprise Linux, server variant, major version 6. A node always uses a base channel, but can also be subscribed to child channels. If it is subscribed to child channels, the node can install RPM's via <command>yum</command>.
					</para>

				</listitem>

			</varlistentry>
			 <varlistentry>
				<term>config channel</term>
				 <listitem>
					<para>
						A config channel is a collection of config files. If a config channel is referenced by an activation key, its contents, the config files, will be deployed on a node that uses that activation key. So the config channel is merely a container for config files. An activation key can connect to the config channels, but this is not necessary.
					</para>

				</listitem>

			</varlistentry>
			 <varlistentry>
				<term>config file</term>
				 <listitem>
					<para>
						A config file is deployed by the Satellite server after the base installation is finished. If it is changed lateron, it can be redeployed at all times at a node by using the <command>rhncfg-client get <filename>&lt;filename&gt;</filename></command> command.
					</para>
					 <para>
						A config file is always contained in a config channel. The '*' indicates that a config channel does not necessarily need to contain a config file.
					</para>

				</listitem>

			</varlistentry>

		</variablelist>

	</para>
	 <para>
		In the commands, we use the following abbreviations to build up the name of the command: 
		<table id="tabl-msat-guide-MSAT_scripts-Command_part_abbreviations">
			<title>Command part abbreviations</title>
			 <tgroup align="left" cols="2" colsep="1" rowsep="1">
				<!--      
    The width of a column by default is 1* or just *. So,
    with 2 columns and column 2 needing 2 times more space,
    we say column 1 has 1* width and column 2 has 2* width.
        --> <colspec colname="c1" colnum="1" colwidth="1*"></colspec>
				 <colspec colname="c2" colnum="2" colwidth="2*"></colspec>
				 <thead>
					<row>
						<entry>
							abbreviation
						</entry>
						 <entry>
							explanation
						</entry>

					</row>

				</thead>
				 <tbody>
					<row>
						<entry>
							ak
						</entry>
						 <entry>
							activation key
						</entry>

					</row>
					 <row>
						<entry>
							cc
						</entry>
						 <entry>
							config channel
						</entry>

					</row>
					 <row>
						<entry>
							cf
						</entry>
						 <entry>
							config file
						</entry>

					</row>
					 <row>
						<entry>
							co
						</entry>
						 <entry>
							custom option
						</entry>

					</row>
					 <row>
						<entry>
							cs
						</entry>
						 <entry>
							cobbler snippet
						</entry>

					</row>
					 <row>
						<entry>
							hy
						</entry>
						 <entry>
							hierarchy
						</entry>

					</row>
					 <row>
						<entry>
							kp
						</entry>
						 <entry>
							kickstart profile
						</entry>

					</row>
					 <row>
						<entry>
							msat
						</entry>
						 <entry>
							meta satellite
						</entry>

					</row>
					 <row>
						<entry>
							sc
						</entry>
						 <entry>
							software channel
						</entry>

					</row>
					 <row>
						<entry>
							sys
						</entry>
						 <entry>
							system
						</entry>

					</row>

				</tbody>

			</tgroup>

		</table>

	</para>
	 <para>
		So, for example, the command <emphasis>msat_ls_cc_cf</emphasis> means: meta satelliste list config channel config files. It will show the config files known to the specified config channel.
	</para>
	 <xi:include href="msat/conf.xml" xmlns:xi="http://www.w3.org/2001/XInclude" />
	 <xi:include href="msat/make.xml" xmlns:xi="http://www.w3.org/2001/XInclude" />
	 <xi:include href="msat/list.xml" xmlns:xi="http://www.w3.org/2001/XInclude" />
	 <xi:include href="msat/remove.xml" xmlns:xi="http://www.w3.org/2001/XInclude" />
	 <xi:include href="msat/write.xml" xmlns:xi="http://www.w3.org/2001/XInclude" />
</chapter>

