<?xml version='1.0' encoding='utf-8' ?>
<!DOCTYPE section PUBLIC "-//OASIS//DTD DocBook XML V4.5//EN" "http://www.oasis-open.org/docbook/xml/4.5/docbookx.dtd" [
<!ENTITY % BOOK_ENTITIES SYSTEM "msat-guide.ent">
%BOOK_ENTITIES;
]>
<section id="spacewalk-msat_demo">
  <title>MSAT Demo</title>
   <table id="tabl-msat-guide-MSAT_Demo-Time_needed">
    <title>Time needed</title>
     <tgroup align="left" cols="2" colsep="1" rowsep="1">
      <colspec colname="c1" colnum="1" colwidth="1*"></colspec>
       <colspec colname="c2" colnum="2" colwidth="1*"></colspec>
       <thead valign="top">
        <row>
          <entry>
            action
          </entry>
           <entry>
            time
          </entry>

        </row>

      </thead>
       <tbody valign="top">
        <row>
          <entry>
            Save Spacewalk content
          </entry>
           <entry>
            1 minute
          </entry>

        </row>
         <row>
          <entry>
            Remove Spacewalk content
          </entry>
           <entry>
            1 minute
          </entry>

        </row>
         <row>
          <entry>
            Recreate Spacewalk content
          </entry>
           <entry>
            1 minute
          </entry>

        </row>
         <row>
          <entry>
            Install test system
          </entry>
           <entry>
            15 minutes
          </entry>

        </row>

      </tbody>

    </tgroup>

  </table>
   <para>
    Since we have a functional Spacewalk server, we can demonstrate how the MSAT scripts function. In later chapters detailed information is provided about the MSAT scripts. Here, we merely demonstrate how we can create the same <emphasis role="bold">test01</emphasis> kickstart profile in a scripted way.
  </para>
   <para>
    First, we start by saving the current content of the Spacewalk by saving <emphasis role="bold">test01</emphasis>. 
<screen>
&sw1p; <userinput>msat_ls_kp.py</userinput>
test01

&sw1p; <userinput>msat_wr_kp_hy.py -l test01</userinput>
&sw1p; <userinput>tree --charset=ASCII -F --noreport test01</userinput>
test01
|-- ak-test01.sh*
|-- cc-test01.sh*
`-- kp-test01.sh*

&sw1p; <userinput>cat test01/kp-test01.sh</userinput>
#!/bin/bash
#
# SCRIPT
#   kp-test01.sh
# DESCRIPTION
#   This script creates the test01
#   kickstart profile.
# ARGUMENTS
#   None.
# RETURN
#   0: success.
# DEPENDENCIES
# FAILURE
#   If you put single quotes around value, but forget to
#   escape embedded single quotes, this script will fail.
#   Escaping works like this:
#   $ echo 'don'"'"'t'
#   don't
#   So ' -&gt; '"'"'
#   Complicated huh?
# AUTHORS
#   Date strings made with 'date +"\%Y-\%m-\%d \%H:\%M"'.
#   Allard Berends (AB), 2013-05-10 17:17
# HISTORY
# LICENSE
#   Copyright (C) 2013 Allard Berends
# 
#   kp-test01.sh is free software; you can
#   redistribute it and/or modify it under the terms of the
#   GNU General Public License as published by the Free
#   Software Foundation; either version 3 of the License, or
#   (at your option) any later version.
#
#   kp-test01.sh is distributed in the hope
#   that it will be useful, but WITHOUT ANY WARRANTY;
#   without even the implied warranty of MERCHANTABILITY or
#   FITNESS FOR A PARTICULAR PURPOSE. See the GNU General
#   Public License for more details.
#
#   You should have received a copy of the GNU General
#   Public License along with this program; if not, write to
#   the Free Software Foundation, Inc., 59 Temple Place -
#   Suite 330, Boston, MA 02111-1307, USA.
# DESIGN
#


ORGNUM=$(msat_ls_org.py)

SATELLITE=$(msat_ls_sn.py)

msat_mk_kp.py \
  --kickstart-label "test01" \
  --kickstart-virt none \
  --kickstart-tree ks-centos-x86_64-server-5u8 \
  --kickstart-satellite $SATELLITE \
  --kickstart-root redhat \
  --kickstart-childchannels '' \
  --kickstart-configmgt true \
  --kickstart-remotecmds true \
  --kickstart-partitioning 'part /boot --fstype=ext3 --size=200,part pv.01 --size=1 --grow,part swap --size=512,volgroup myvg pv.01,logvol / --vgname=myvg --name=rootvol --size=1 --grow' \
  --kickstart-keys 'RPM-GPG-KEY-EPEL-5,RPM-GPG-KEY-spacewalk-2012,RPM-GPG-KEY-CentOS-5,RHN-ORG-TRUSTED-SSL-CERT' \
  --kickstart-install true \
  --kickstart-text true \
  --kickstart-url '--url /var/satellite/rhn/kickstart/ks-centos-x86_64-server-5u8' \
  --kickstart-lang 'en_US' \
  --kickstart-keyboard 'us' \
  --kickstart-zerombr true \
  --kickstart-clearpart '--all' \
  --kickstart-bootloader '--location mbr' \
  --kickstart-timezone '--utc Europe/Amsterdam' \
  --kickstart-auth '--enablemd5 --enableshadow' \
  --kickstart-rootpw '$1$yfdvYZ2s$mXFhCqaiSjZ0mt9M3ZKFr0' \
  --kickstart-selinux '--enforcing' \
  --kickstart-reboot true \
  --kickstart-firewall '--enabled' \
  --kickstart-skipx true \
  --kickstart-key '--skip' \
  --kickstart-software '@ Base' \
  --kickstart-activationkey $ORGNUM-test01 \
  --kickstart-script '/bin/rm /etc/yum.repos.d/CentOS-*.repo'
</screen>

  </para>
   <para>
    As one can see, the kickstart profile and the items it refers to are saved in the <filename class="directory">test01</filename> directory. Examining the content of, for example, the <filename>test01/kp-test01.sh</filename> script, shows that the items are saved in regeneration scripts. This means, if the script is run, it fills the Spacewalk server with the item.
  </para>
   <important>
    <title>Order of running scripts</title>
     <para>
      The kickstart profile depends on the activation key. The activation key, on its turn, depends on the config channel with config file. Running the kickstart regeneration script first, results in an error. It can not find the specified activation key.
    </para>

  </important>
    <para>
      Now, it is time to unregister the already installed
      system. We do this with:
      <menuchoice>
        <guimenu>Sign In</guimenu>
        <guimenuitem>Spacewalk Login: example</guimenuitem>
        <guimenuitem>Password: redhat</guimenuitem>
        <guibutton>Sign In</guibutton>
        <guimenuitem>Systems</guimenuitem>
        <guimenuitem>&t1;.dmsat1.org</guimenuitem>
        <guimenuitem>delete system</guimenuitem>
        <guimenuitem>Delete Profile</guimenuitem>
      </menuchoice>
    </para>
  <para>
    Here, we show how to delete the system items (system in Cobbler, kickstart profiles, activation keys, config channels) in the Spacewalk server. 
<screen>
&sw1p; <userinput>sudo cobbler system list</userinput>
   SpacewalkDefaultOrganization_kvm_&t1;
&sw1p; <userinput>sudo cobbler system remove --name SpacewalkDefaultOrganization_kvm_&t1;</userinput>
&sw1p; <userinput>msat_rm_kp_all.sh; msat_rm_ak_all.sh; msat_rm_cc_all.sh</userinput></screen>

  </para>
   <warning>
    <title>Run msat_rm_*_all.sh only on a test Spacewalk</title>
     <para>
      Although very handy during a development phase of a system, the <command>msat_rm_*_all.sh</command> commands completely remove all items (kickstart profiles, activation keys, config channels) in the Spacewalk server. Do this on a production system to find out that all your system definitions are gone. Even if you can restore it with MSAT regeneration scripts, still all the production systems need to be reregistered on the Spacewalk server!
    </para>

  </warning>
   <para>
    Now, we run the regeneration scripts in the right order to create the system items again. The right order is automatically executed by <command>msat_mk_kp_hy.sh</command>. 
<screen>
&sw1p; <userinput>cd</userinput>
&sw1p; <userinput>msat_mk_kp_hy.sh -d /root/test01</userinput>
/usr/local/bin/msat/msat_mk_kp_hy.sh: line 134: ./cs*: No such file or directory
&sw1p; <userinput>./cobbler-&t1;.sh</userinput>
&sw1p; <userinput>sudo cobbler buildiso --iso=/var/www/cobbler/pub/example/centos5u8-test01-kvm.iso --profiles="" --systems="SpacewalkDefaultOrganization_kvm_&t1;" --tempdir=/tmp</userinput>
.. output skipped ..
&sw1p; <userinput>scp /var/www/cobbler/pub/example/centos5u8-test01-kvm.iso root@192.168.5.1:/tmp</userinput>
root@192.168.5.1's password: <userinput>redhat</userinput>
centos5u8-test01-kvm.iso                      100%   14MB  14.3MB/s   00:00
</screen>

  </para>
   <para>
    The installation is started with: 
<screen>
&srvprompt; <userinput>virt-install \</userinput>
  <userinput>--connect qemu:///system \</userinput>
  <userinput>--name=&t1; \</userinput>
  <userinput>--ram=512 \</userinput>
  <userinput>--arch=x86_64 \</userinput>
  <userinput>--description="Provisioning test machine" \</userinput>
  <userinput>--cdrom /tmp/centos5u8-test01-kvm.iso \</userinput>
  <userinput>--os-type=linux \</userinput>
  <userinput>--os-variant=rhel5.4 \</userinput>
  <userinput>--disk path=/dev/e/mm,device=disk,bus=scsi \</userinput>
  <userinput>--network=network=dmsat1,mac=52:54:00:a8:05:64 \</userinput>
  <userinput>--graphics vnc \</userinput>
  <userinput>--hvm \</userinput>
  <userinput>--autostart</userinput>
.. output skipped, about 10 minutes ..
</screen>
     Select <emphasis role="bold">SpacewalkDefaultOrganization_kvm_&t1;</emphasis> and press <keycap function="enter">Enter</keycap>.
  </para>
</section>


