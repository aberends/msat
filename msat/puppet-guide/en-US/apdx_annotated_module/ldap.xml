<?xml version='1.0' encoding='utf-8' ?>
<!DOCTYPE section PUBLIC "-//OASIS//DTD DocBook XML V4.5//EN" "http://www.oasis-open.org/docbook/xml/4.5/docbookx.dtd" [
<!ENTITY % BOOK_ENTITIES SYSTEM "../puppet-guide.ent">
%BOOK_ENTITIES;
]>
<section id="apdx_annotated_module-ldap">
  <title>Annotated LDAP module</title>

  <para>
    In this section we discuss a Puppet module. We use an
    LDAP module as an example. In the subsequent text, we
    show the module and explain from the code how the
    construction of the module works and why some choices
    are made.
  </para>

  <para>
    We start by showing the module structure. Next, we show
    some excerpts of the content of some module files.
  </para>

  <para>
    On the target node (the node to be provisioned with
    Puppet), the <emphasis>ldap</emphasis> module is placed
    under <filename
    class="directory">/etc/puppet/modules</filename>. The
    directory tree of the module is:
<screen>
&t1p; <userinput>tree --charset=ASCII --noreport /etc/puppet/modules/ldap</userinput>
/etc/puppet/modules/ldap
|-- files
|   |-- 90-nofile.conf
|   |-- modify_ssl.ldif
|   |-- noise.txt
|   |-- nsswitch.5
|   |-- nsswitch.6
|   `-- system-auth-ac
|-- manifests
|   |-- client.pp
|   |-- install.pp
|   |-- mmr.pp
|   |-- params.pp
|   |-- server.pp
|   `-- ssl.pp
`-- templates
    |-- idle_timeout.ldif.erb
    |-- mmr.ldif.erb
    |-- mozldap.erb
    |-- nslcd.erb
    |-- openldap.erb
    |-- pam_ldap.erb
    |-- pin.txt.erb
    |-- setup.erb
    `-- start-replication.sh.erb
</screen>
    The files under <filename
    class="directory">ldap/manifests</filename>, are called
    the Puppet manifests, which are the Puppet parts with
    the actual Puppet code, written in the Puppet language.
    While discussing the Puppet manifests, we encounter Ruby
    templates and static config files. Of both we show an
    example.
  </para>

  <para>
    The complete code of the example module can be found at
    <xref
    linkend="puppet-guide-ref_material-puppet-construction" />.
  </para>

  <para>
    The Puppet code, the manifest files, contain Puppet
    classes. We distinguish 3 different type of Puppet
    classes:
    <variablelist>
      <varlistentry>
        <term>interface class</term>
        <listitem>
          <para>
            Always called &lt;module&gt;::params.
          </para>
        </listitem>
      </varlistentry>
      <varlistentry>
        <term>construction class</term>
        <listitem>
          <para>
            Called &lt;module&gt;::&lt;class name&gt; or
            sometimes, in the <filename>init.pp</filename>
            file &lt;class name&gt;, so withoud the module
            name.
          </para>
        </listitem>
      </varlistentry>
      <varlistentry>
        <term>helper class</term>
        <listitem>
          <para>
            Always called &lt;module&gt;::&lt;class name&gt;.
            Since it is a helper class, it is never placed in
            the <filename>init.pp</filename> file.
          </para>
        </listitem>
      </varlistentry>
    </variablelist>
  </para>

  <note>
    <title>Example of module with submodules</title>

    <para>
      Note that, if we deal with a bigger module, the class
      names can become more subdivided, as in:
      &lt;module&gt;::&lt;class name&gt;::&lt;subclass
      name&gt;, or even in more parts between
      <emphasis>::</emphasis> characters. To illustrate a
      Puppet module with multiple <emphasis>::</emphasis>
      signs, so multiple module levels, we show the
      directory tree here of an LVS (Linux Virtual Server)
      Puppet module:
<screen>
&t1p; <userinput>tree --charset=ASCII --noreport /etc/puppet/modules/lvs</userinput>
/etc/puppet/modules/lvs
|-- manifests
|   |-- install.pp
|   |-- lb_channel.pp
|   |-- ldap                 (submodule lvs::ldap)
|   |   |-- params.pp        (class lvs::ldap::params)
|   |   `-- server.pp        (class lvs::ldap::server)
|   |-- params.pp
|   `-- service.pp
`-- templates
    `-- ldap                 (templates lvs/ldap)
        |-- check_ds.erb     (submodule template)
        |-- check_ds_ssl.erb (submodule template)
        `-- lvs.cf.erb       (submodule template)
</screen>
      The code of the LVS module can be found at <xref
      linkend="puppet-guide-ref_material-puppet-construction" />.
    </para>
  </note>

  <xi:include href="ldap_params.xml" xmlns:xi="http://www.w3.org/2001/XInclude" />
  <xi:include href="ldap_client.xml" xmlns:xi="http://www.w3.org/2001/XInclude" />
</section>
