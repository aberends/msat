<?xml version='1.0' encoding='utf-8' ?>
<!DOCTYPE section PUBLIC "-//OASIS//DTD DocBook XML V4.5//EN" "http://www.oasis-open.org/docbook/xml/4.5/docbookx.dtd" [
<!ENTITY % BOOK_ENTITIES SYSTEM "../puppet-guide.ent">
%BOOK_ENTITIES;
]>
<section id="puppet_configuration-puppet_conf">
  <title>Puppet configuration file</title>

  <para>
    The puppet configuration file,
    <filename>/etc/puppet/puppet.conf</filename>, comes from
    the Puppet RPM package. Since we need a feature from the
    future parser, the <emphasis>each</emphasis> language
    construct, we adapt the default configuration with the
    setting: <emphasis role="bold">parser =
    future</emphasis>. All other settings have their default
    values.
<screen>
&t1p; <userinput>cat /etc/puppet/puppet.conf</userinput>
[main]
    # AB: We use an each loop. Hence we need the future
    # option.
    <emphasis role="strong">parser = future</emphasis>
    # The Puppet log directory.
    # The default value is '$vardir/log'.
    logdir = /var/log/puppet

    # Where Puppet PID files are kept.
    # The default value is '$vardir/run'.
    rundir = /var/run/puppet

    # Where SSL certificates are kept.
    # The default value is '$confdir/ssl'.
    ssldir = $vardir/ssl

    # AB: enable directory environments
    #environmentpath = $confdir/environments

[agent]
    # The file in which puppetd stores a list of the classes
    # associated with the retrieved configuratiion.  Can be loaded in
    # the separate ``puppet`` executable using the ``--loadclasses``
    # option.
    # The default value is '$confdir/classes.txt'.
    classfile = $vardir/classes.txt

    # Where puppetd caches the local configuration.  An
    # extension indicating the cache format is added automatically.
    # The default value is '$confdir/localconfig'.
    localconfig = $vardir/localconfig
</screen>
  </para>

  <para>
    Puppet provides a command line method to interrogate the
    configuration. The configuration settings that are of
    interest to us right now are shown here.
  </para>

  <para>
    Puppet obtains its configuration settings from a
    configuration directory:
<screen>
&t1p; <userinput>puppet config print confdir</userinput>
/etc/puppet
</screen>
  </para>

  <para>
    The base configuration file of Puppet is:
<screen>
&t1p; <userinput>puppet config print config</userinput>
/etc/puppet/puppet.conf
</screen>
  </para>

  <para>
    When Puppet runs, it obtains the Puppet classes from the
    following directory trees:
<screen>
&t1p; <userinput>puppet config print modulepath</userinput>
/etc/puppet/modules:/usr/share/puppet/modules
</screen>
  </para>

  <para>
    Since Puppet uses YAML files to obtain class parameters,
    it needs to know where to find the YAML files. It is
    configured in:
<screen>
&t1p; <userinput>puppet config print hiera_config</userinput>
/etc/puppet/hiera.yaml
</screen>
    The key lookup structure via the YAML files, is
    explained in <xref linkend="puppet_configuration-layers" />.
  </para>

  <para>
    If one wants to extend Puppet with custom facts, the
    configuration setting <emphasis>pluginsync</emphasis>
    must be enabled. See what the default value is:
<screen>
&t1p; <userinput>puppet config print pluginsync</userinput>
true
</screen>
  </para>

  <para>
    The custom fact can be tested with:
<screen>
&t1p; <userinput>cat /etc/puppet/modules/dev/lib/facter/loadavg1.rb</userinput>
# loadavg1
# /proc/loadavg, CPU utilization of the last 1, 5, and 10
# minute periods, number of currently running processes,
# total number of processes

Facter.add('loadavg1') do
  setcode do
    Facter::Util::Resolution.exec('/bin/awk \'{print $1}\' /proc/loadavg')
  end
end

&t1p; <userinput>export FACTERLIB="/etc/puppet/modules/dev/lib"</userinput>
&t1p; <userinput>facter loadavg1</userinput>
0.00
</screen>
  </para>

</section>

