<?xml version='1.0' encoding='utf-8' ?>
<!DOCTYPE section PUBLIC "-//OASIS//DTD DocBook XML V4.5//EN" "http://www.oasis-open.org/docbook/xml/4.5/docbookx.dtd" [
<!ENTITY % BOOK_ENTITIES SYSTEM "puppet-guide.ent">
%BOOK_ENTITIES;
]>
<section id="software-channels">
  <title>Puppet software channels</title>

  <table id="software-channels-time">
    <title>Time needed</title>
    <tgroup align="left" cols="2" colsep="1" rowsep="1">
      <colspec colname="c1" colnum="1" colwidth="1*"></colspec>
      <colspec colname="c2" colnum="2" colwidth="1*"></colspec>
      <thead valign="top">
        <row>
          <entry>action</entry>
          <entry>time</entry>
        </row>
      </thead>
      <tbody valign="top">
        <row>
          <entry>Analysis of CentOS 6.5 channel</entry>
          <entry>20 minutes</entry>
        </row>
        <row>
          <entry>Construction of puppet channel</entry>
          <entry>60 minutes</entry>
        </row>
        <row>
          <entry>Construction of puppet dependencies channel</entry>
          <entry>60 minutes</entry>
        </row>
        <row>
          <entry>Construction of puppet configuration channel</entry>
          <entry>60 minutes</entry>
        </row>
        <row>
          <entry>Construction of directory server channel</entry>
          <entry>60 minutes</entry>
        </row>
      </tbody>
    </tgroup>
  </table>

  <para>
    In this section we discuss ...
    <itemizedlist>
      <listitem>
        <para>
          ...
        </para>
      </listitem>
      <listitem>
        <para>
          ...
        </para>
      </listitem>
      <listitem>
        <para>
          ...
        </para>
      </listitem>
    </itemizedlist>
  </para>

  <section id="software-channels-centos65">
    <title>Analysis of CentOS 6.5 channel</title>

    <para>
      The first question we need to answer, is: do we have
      conflicts in the software channels? The OS and Puppet
      software channels are:
      <table id="software-channels-centos65-channellist">
        <title>Software channels</title>
        <tgroup align="left" cols="2" colsep="1" rowsep="1">
          <colspec colname="c1" colnum="1" colwidth="1*"></colspec>
          <colspec colname="c2" colnum="2" colwidth="1*"></colspec>
          <thead valign="top">
            <row>
              <entry>channel</entry>
              <entry>URL</entry>
            </row>
          </thead>
          <tbody valign="top">
            <row>
              <entry>CentOS 6.5</entry>
              <entry><ulink
              url="http://mirror.centos.org/centos/6.5/os/x86_64/Packages/">mirror.centos.org/centos/6.5/os/x86_64/Packages/</ulink></entry>
            </row>
            <row>
              <entry>Puppet 6.5</entry>
              <entry><ulink
              url="http://yum.puppetlabs.com/el/6.5/products/x86_64/">yum.puppetlabs.com/el/6.5/products/x86_64</ulink></entry>
            </row>
            <row>
              <entry>Puppet deps 6.5</entry>
              <entry><ulink
              url="http://yum.puppetlabs.com/el/6.5/dependencies/x86_64/">yum.puppetlabs.com/el/6.5/dependencies/x86_64</ulink></entry>
            </row>
          </tbody>
        </tgroup>
      </table>
    </para>

    <para>
      We download the lists of RPM's with:
<screen>
&uprompt; <userinput>wget -O - http://mirror.centos.org/centos/6.5/os/x86_64/Packages/ 2>/dev/null | sed -n 's/^.* href="\([^ "]\+\.rpm\)".*$/\1/p' | sed 's/-[0-9]\+.*//' | sort -u > centos65.txt</userinput>

&uprompt; <userinput>wget -O - http://yum.puppetlabs.com/el/6.5/products/x86_64/ 2>/dev/null | sed -n 's/^.* href="\([^ "]\+\.rpm\)".*$/\1/p' | sed 's/-[0-9]\+.*//' | sort -u > puppet65.txt</userinput>

&uprompt; <userinput>wget -O - http://yum.puppetlabs.com/el/6.5/dependencies/x86_64/ 2>/dev/null | sed -n 's/^.* href="\([^ "]\+\.rpm\)".*$/\1/p' | sed 's/-[0-9]\+.*//' | sort -u > puppetdeps65.txt</userinput>
</screen>
    </para>

    <para>
      Next, we need to compare the lists of RPM's to figure
      out if we have conficts. For this purpose, we use the
      <application>line_sets.py</application> tool. See also
      <xref linkend="apdx_tools-line_sets" />
<screen>
&uprompt; <userinput>line_sets.py -a centos65.txt -b puppet65.txt -o '&amp;'</userinput>
.. no output == no intersection ..

&uprompt; <userinput>line_sets.py -a centos65.txt -b puppetdeps65.txt -o '&amp;'</userinput>
.. no output == no intersection ..
</screen>
    </para>

    <para>
      From the above analysis, we can conclude that it is
      safe to place the contents of the Puppet and Puppet
      dependencies in software channels. We don't risk a
      conflict.
    </para>

  </section>
  
  <section id="software-channels-puppet">
    <title>Construction of puppet channel</title>

    <para>
      Since these packages from Puppet Labs are signed with
      the <emphasis
      role="bold">RPM-GPG-KEY-puppetlabs</emphasis> key, we
      need to place this GPG key on the Spacewalk server.
      This is done with:
<screen>
&sw1p; <userinput>cd /tmp</userinput>
&sw1p; <userinput>wget http://yum.puppetlabs.com/RPM-GPG-KEY-puppetlabs</userinput>
&sw1p; <userinput>msat_mk_cr.py -d 'RPM-GPG-KEY-puppetlabs' -t GPG -c /tmp/RPM-GPG-KEY-puppetlabs</userinput>
</screen>
    </para>

    <para>
      In the <emphasis role="bold">Puppet
      channel</emphasis>, we place the RPM's, needed for the
      Puppet product itself. The minimal
      set<footnote><para>We figured out the minimal set by
      creating a test system on which we run some puppet,
      facter and hier commands</para></footnote>, we need
      for our purposes, is:
      <itemizedlist>
        <listitem>
          <para>
            <package>facter</package>
          </para>
        </listitem>
        <listitem>
          <para>
            <package>hiera</package>
          </para>
        </listitem>
        <listitem>
          <para>
            <package>puppet</package>
          </para>
        </listitem>
      </itemizedlist>
    </para>

    <para>
      Since we want to collaborate with another group of
      Puppet developers, who have already chosen their
      packages, we use the specific versions:
      <table id="software-channels-puppet-rpms">
        <title>Puppet channel RPM's</title>
        <tgroup align="left" cols="3" colsep="1" rowsep="1">
          <colspec colname="c1" colnum="1" colwidth="1*"></colspec>
          <colspec colname="c2" colnum="2" colwidth="1*"></colspec>
          <colspec colname="c3" colnum="3" colwidth="1*"></colspec>
          <thead valign="top">
            <row>
              <entry>Package</entry>
              <entry>Summary</entry>
              <entry>Provider</entry>
            </row>
          </thead>
          <tbody valign="top">
            <row>
              <entry>facter-1.7.5-1.el6:1.x86_64</entry>
              <entry>Ruby module for collecting simple facts
              about a host operating system</entry>
              <entry>Puppet Labs</entry>
            </row>
            <row>
              <entry>hiera-1.3.2-1.el6.noarch</entry>
              <entry>A simple pluggable Hierarchical
              Database</entry>
              <entry>Puppet Labs</entry>
            </row>
            <row>
              <entry>puppet-3.4.3-1.el6.noarch</entry>
              <entry>A network tool for managing many
              disparate systems</entry>
              <entry>Puppet Labs</entry>
            </row>
          </tbody>
        </tgroup>
      </table>
    </para>

    <para>
      We obtain these packages from <ulink
      url="http://yum.puppetlabs.com/el/6.5/products/x86_64/">Index
      of /el/6.5/products</ulink>. Since they need to be
      placed on the Spacewalker server, we have to execute,
      on the Spacewalk server:
<screen>
&sw1p; <userinput>mkdir /var/satellite/example-puppet-6u5-1_0</userinput>
&sw1p; <userinput>cd /var/satellite/example-puppet-6u5-1_0</userinput>
&sw1p; <userinput>wget http://yum.puppetlabs.com/el/6.5/products/x86_64/facter-1.7.5-1.el6.x86_64.rpm</userinput>
&sw1p; <userinput>wget http://yum.puppetlabs.com/el/6.5/products/x86_64/hiera-1.3.2-1.el6.noarch.rpm</userinput>
&sw1p; <userinput>wget http://yum.puppetlabs.com/el/6.5/products/x86_64/puppet-3.4.3-1.el6.noarch.rpm</userinput>
</screen>
    </para>

    <para>
      On the Spacewalk server, we construct a new channel,
      called <userinput>example-puppet-6u5-1_0</userinput>,
      with the command:
<screen>
&sw1p; <userinput>msat_mk_sc.py -l example-puppet-6u5-1_0 -n example-puppet-6u5-1_0 -s example-puppet-6u5-1_0 --softwarechannel-arch=channel-x86_64 --softwarechannel-parent=centos-x86_64-server-6</userinput>
</screen>
      The result can be verified on the web interface of the
      Spacewalk server or on the command line:
<screen>
&sw1p; <userinput>msat_ls_sc.py | grep example-puppet-6u5-1_0</userinput>
example-puppet-6u5-1_0
</screen>
    </para>

    <para>
      We add the downloaded RPM's to the channel with:
<screen>
&sw1p; <userinput>cd /var/satellite</userinput>
&sw1p; <userinput>rhnpush -c example-puppet-6u5-1_0 -u example -p redhat -d example-puppet-6u5-1_0</userinput>
</screen>
    </para>

    <para>
      We verify the result with:
<screen>
&sw1p; <userinput>msat_ls_sc_rpms.py -l example-puppet-6u5-1_0</userinput>
facter 1.7.5 1.el6 x86_64
hiera 1.3.2 1.el6 noarch
puppet 3.4.3 1.el6 noarch
</screen>
    </para>

  </section>

  <section id="software-channels-deps">
    <title>Construction of puppet dependencies channel</title>

    <para>
      In the <emphasis role="bold">Puppet Dependencies
      channel</emphasis>, we place the RPM's, needed to
      support the Puppet product itself. The minimal set, we
      need for our purposes<footnote><para>We figured out
      the minimal set of dependencies by running puppet,
      facter and hiera commands on a test system. We added
      the dependencies as given by the <command>yum install
      puppet facter hiera</command>
      command.</para></footnote>, is:
      <itemizedlist>
        <listitem>
          <para>
            <package>ruby-augeas</package>
          </para>
        </listitem>
        <listitem>
          <para>
            <package>rubygem-json</package>
          </para>
        </listitem>
        <listitem>
          <para>
            <package>ruby-rgen</package>
          </para>
        </listitem>
        <listitem>
          <para>
            <package>ruby-shadow</package>
          </para>
        </listitem>
      </itemizedlist>
    </para>

    <para>
      Since we want to collaborate with another group of
      Puppet developers, who have already chosen their
      packages, we use the specific versions:
      <table id="software-channels-deps-rpms">
        <title>Puppet channel RPM's</title>
        <tgroup align="left" cols="3" colsep="1" rowsep="1">
          <colspec colname="c1" colnum="1" colwidth="1*"></colspec>
          <colspec colname="c2" colnum="2" colwidth="1*"></colspec>
          <colspec colname="c3" colnum="3" colwidth="1*"></colspec>
          <thead valign="top">
            <row>
              <entry>Package</entry>
              <entry>Summary</entry>
              <entry>Provider</entry>
            </row>
          </thead>
          <tbody valign="top">
            <row>
              <entry>ruby-augeas-0.4.1-3.el6.x86_64</entry>
              <entry>Ruby bindings for Augeas</entry>
              <entry>Puppet Labs</entry>
            </row>
            <row>
              <entry>rubygem-json-1.5.5-1.el6.x86_64</entry>
              <entry>A JSON implementation in Ruby</entry>
              <entry>Puppet Labs</entry>
            </row>
            <row>
              <entry>ruby-rgen-0.6.5-2.el6.noarch</entry>
              <entry>Ruby Modeling and Generator Framework</entry>
              <entry>Puppet Labs</entry>
            </row>
            <row>
              <entry>ruby-shadow-2.2.0-2.el6:1.x86_64</entry>
              <entry>Ruby bindings for shadow password
              access</entry>
              <entry>Puppet Labs</entry>
            </row>
          </tbody>
        </tgroup>
      </table>
    </para>

    <para>
      We obtain these packages from <ulink
      url="http://yum.puppetlabs.com/el/6.5/dependencies/x86_64/">Index
      of /el/6.5/dependencies</ulink>. Since they need to be
      placed on the Spacewalker server, we have to execute,
      on the Spacewalk server:
<screen>
&sw1p; <userinput>mkdir /var/satellite/example-puppet-deps-6u5-1_0</userinput>
&sw1p; <userinput>cd /var/satellite/example-puppet-deps-6u5-1_0</userinput>
&sw1p; <userinput>wget http://yum.puppetlabs.com/el/6.5/dependencies/x86_64/ruby-augeas-0.4.1-3.el6.x86_64.rpm</userinput>
&sw1p; <userinput>wget http://yum.puppetlabs.com/el/6.5/dependencies/x86_64/rubygem-json-1.5.5-1.el6.x86_64.rpm</userinput>
&sw1p; <userinput>wget http://yum.puppetlabs.com/el/6.5/dependencies/x86_64/ruby-rgen-0.6.5-2.el6.noarch.rpm</userinput>
&sw1p; <userinput>wget http://yum.puppetlabs.com/el/6.5/dependencies/x86_64/ruby-shadow-2.2.0-2.el6.x86_64.rpm</userinput>
</screen>
    </para>

    <para>
      On the Spacewalk server, we construct a new channel,
      called <userinput>example-puppet-deps-6u5-1_0</userinput>,
      with the command:
<screen>
&sw1p; <userinput>msat_mk_sc.py -l example-puppet-deps-6u5-1_0 -n example-puppet-deps-6u5-1_0 -s example-puppet-deps-6u5-1_0 --softwarechannel-arch=channel-x86_64 --softwarechannel-parent=centos-x86_64-server-6</userinput>
</screen>
      The result can be verified on the web interface of the
      Spacewalk server or on the command line:
<screen>
&sw1p; <userinput>msat_ls_sc.py | grep example-puppet-deps-6u5-1_0</userinput>
example-puppet-deps-6u5-1_0
</screen>
    </para>

    <para>
      We add the downloaded RPM's to the channel with:
<screen>
&sw1p; <userinput>cd /var/satellite</userinput>
&sw1p; <userinput>rhnpush -c example-puppet-deps-6u5-1_0 -u example -p redhat -d example-puppet-deps-6u5-1_0</userinput>
</screen>
    </para>

    <para>
      We verify the result with:
<screen>
&sw1p; <userinput>msat_ls_sc_rpms.py -l example-puppet-deps-6u5-1_0</userinput>
ruby-augeas 0.4.1 3.el6 x86_64
rubygem-json 1.5.5 1.el6 x86_64
ruby-rgen 0.6.5 2.el6 noarch
ruby-shadow 2.2.0 2.el6 x86_64
</screen>
    </para>

  </section>

  <section id="software-channels-ds">
    <title>Construction of directory server channel</title>

    <para>
      Since these packages from EPEL are signed with
      the <emphasis
      role="bold">RPM-GPG-KEY-EPEL-6</emphasis> key, we
      need to place this GPG key on the Spacewalk server.
      This is done with:
<screen>
&sw1p; <userinput>cd /tmp</userinput>
&sw1p; <userinput>wget http://epel.mirror.net.in/epel/RPM-GPG-KEY-EPEL-6</userinput>
&sw1p; <userinput>msat_mk_cr.py -d 'RPM-GPG-KEY-EPEL-6' -t GPG -c /tmp/RPM-GPG-KEY-EPEL-6</userinput>
</screen>
    </para>

    <para>
      In the <emphasis role="bold">Directory Server
      channel</emphasis>, we place the RPM's, needed to
      support the 389 Directory server product. The minimal
      set, we need for our purposes<footnote><para>We
      figured out the minimal set of dependencies by
      installing 389-ds from EPEL (Extra Packages for
      Enterprise Linux).</para></footnote>, is:
      <itemizedlist>
        <listitem>
          <para>
            <package>389-ds</package>
          </para>
        </listitem>
        <listitem>
          <para>
            <package>389-admin</package>
          </para>
        </listitem>
        <listitem>
          <para>
            <package>389-admin-console</package>
          </para>
        </listitem>
        <listitem>
          <para>
            <package>389-admin-console-doc</package>
          </para>
        </listitem>
        <listitem>
          <para>
            <package>389-adminutil</package>
          </para>
        </listitem>
        <listitem>
          <para>
            <package>389-console</package>
          </para>
        </listitem>
        <listitem>
          <para>
            <package>389-ds-console</package>
          </para>
        </listitem>
        <listitem>
          <para>
            <package>389-ds-console-doc</package>
          </para>
        </listitem>
        <listitem>
          <para>
            <package>389-dsgw</package>
          </para>
        </listitem>
      </itemizedlist>
    </para>

    <para>
      We use the specific versions:
      <table id="software-channels-ds-rpms">
        <title>Directory Server channel RPM's</title>
        <tgroup align="left" cols="3" colsep="1" rowsep="1">
          <colspec colname="c1" colnum="1" colwidth="1*"></colspec>
          <colspec colname="c2" colnum="2" colwidth="1*"></colspec>
          <colspec colname="c3" colnum="3" colwidth="1*"></colspec>
          <thead valign="top">
            <row>
              <entry>Package</entry>
              <entry>Summary</entry>
              <entry>Provider</entry>
            </row>
          </thead>
          <tbody valign="top">
            <row>
              <entry>ruby</entry>
              <entry>ruby</entry>
              <entry>ruby</entry>
            </row>
            <row>
              <entry>ruby</entry>
              <entry>ruby</entry>
              <entry>ruby</entry>
            </row>
            <row>
              <entry>ruby</entry>
              <entry>ruby</entry>
              <entry>ruby</entry>
            </row>
            <row>
              <entry>ruby</entry>
              <entry>ruby</entry>
              <entry>ruby</entry>
            </row>
            <row>
              <entry>ruby</entry>
              <entry>ruby</entry>
              <entry>ruby</entry>
            </row>
            <row>
              <entry>ruby</entry>
              <entry>ruby</entry>
              <entry>ruby</entry>
            </row>
            <row>
              <entry>ruby</entry>
              <entry>ruby</entry>
              <entry>ruby</entry>
            </row>
            <row>
              <entry>ruby</entry>
              <entry>ruby</entry>
              <entry>ruby</entry>
            </row>
            <row>
              <entry>ruby</entry>
              <entry>ruby</entry>
              <entry>ruby</entry>
            </row>
          </tbody>
        </tgroup>
      </table>
    </para>

    <para>
      We obtain these packages from <ulink
      url="http://epel.mirror.net.in/epel/6/x86_64/">Index
      of /epel/6/x86_64/</ulink>. Since they need to be
      placed on the Spacewalker server, we have to execute,
      on the Spacewalk server:
<screen>
&sw1p; <userinput>mkdir /var/satellite/example-epel-6u5-1_0</userinput>
&sw1p; <userinput>cd /var/satellite/example-epel-6u5-1_0</userinput>
&sw1p; <userinput>wget -O - http://epel.mirror.net.in/epel/6/x86_64/ 2>/dev/null | sed -n 's/^.* href="\([^ "]\.rpm\)".*$/\1/p' | grep ^389 | grep -v i686 | while read line; do wget http://epel.mirror.net.in/epel/6/x86_64/$line; done</userinput>
.. output skipped ..

&sw1p; <userinput>ls -1</userinput>
389-admin-1.1.35-1.el6.x86_64.rpm
389-admin-console-1.1.8-1.el6.noarch.rpm
389-admin-console-doc-1.1.8-1.el6.noarch.rpm
389-adminutil-1.1.19-1.el6.x86_64.rpm
389-adminutil-devel-1.1.19-1.el6.x86_64.rpm
389-console-1.1.7-1.el6.noarch.rpm
389-ds-1.2.2-1.el6.noarch.rpm
389-ds-console-1.2.6-1.el6.noarch.rpm
389-ds-console-doc-1.2.6-1.el6.noarch.rpm
389-dsgw-1.1.11-1.el6.x86_64.rpm
</screen>
    </para>

    <para>
      On the Spacewalk server, we construct a new channel,
      called <userinput>example-epel-6u5-1_0</userinput>,
      with the command:
<screen>
&sw1p; <userinput>msat_mk_sc.py -l example-epel-6u5-1_0 -n example-epel-6u5-1_0 -s example-epel-6u5-1_0 --softwarechannel-arch=channel-x86_64 --softwarechannel-parent=centos-x86_64-server-6</userinput>
</screen>
      The result can be verified on the web interface of the
      Spacewalk server or on the command line:
<screen>
&sw1p; <userinput>msat_ls_sc.py | grep example-epel-6u5-1_0</userinput>
example-epel-6u5-1_0
</screen>
    </para>

    <para>
      We add the downloaded RPM's to the channel with:
<screen>
&sw1p; <userinput>cd /var/satellite</userinput>
&sw1p; <userinput>rhnpush -c example-epel-6u5-1_0 -u example -p redhat -d example-epel-6u5-1_0</userinput>
</screen>
    </para>

    <para>
      We verify the result with:
<screen>
&sw1p; <userinput>msat_ls_sc_rpms.py -l example-epel-6u5-1_0</userinput>
389-admin 1.1.35 1.el6 x86_64
389-admin-console 1.1.8 1.el6 noarch
389-admin-console-doc 1.1.8 1.el6 noarch
389-adminutil 1.1.19 1.el6 x86_64
389-adminutil-devel 1.1.19 1.el6 x86_64
389-console 1.1.7 1.el6 noarch
389-ds 1.2.2 1.el6 noarch
389-ds-console 1.2.6 1.el6 noarch
389-ds-console-doc 1.2.6 1.el6 noarch
389-dsgw 1.1.11 1.el6 x86_64
</screen>
    </para>

    <para>
      Unfortunately, we are not done yet. Some RPM's are
      still missing. By repeatedly trying with
      <command>yum install 389-ds</command> and placing
      missing packages in
      <emphasis>example-epel-6u5-1_0</emphasis>, we arrive
      at the following channel content:
<screen>
&sw1p; <userinput>msat_ls_sc_rpms.py -l example-epel-6u5-1_0</userinput>
</screen>
    </para>

  </section>

  <section id="software-channels-conf">
    <title>Construction of puppet configuration channel</title>

    <para>
      ...
    </para>

  </section>

</section>
