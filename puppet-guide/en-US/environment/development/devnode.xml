<?xml version='1.0' encoding='utf-8' ?>
<!DOCTYPE section PUBLIC "-//OASIS//DTD DocBook XML V4.5//EN" "http://www.oasis-open.org/docbook/xml/4.5/docbookx.dtd" [
<!ENTITY % BOOK_ENTITIES SYSTEM "../../puppet-guide.ent">
%BOOK_ENTITIES;
]>
<section id="environment-development-devnode">
  <title>Development node</title>

  <para>
    The SSH public key authentication mechanism makes it
    easy for us to reach the development node. The public
    SSH key of our host is copied with:
<screen>
&uhp; <userinput>ssh-copy-id root@192.168.5.14</userinput>
/usr/bin/ssh-copy-id: INFO: attempting to log in with the new key(s), to filter out any that are already installed
/usr/bin/ssh-copy-id: INFO: 2 key(s) remain to be installed -- if you are prompted now it is to install the new keys
Warning: Permanently added '192.168.5.14' (RSA) to the list of known hosts.
root@192.168.5.14's password: <userinput>redhat</userinput>

Number of key(s) added: 2

Now try logging into the machine, with:   "ssh 'root@192.168.5.14'"
and check to make sure that only the key(s) you wanted were added.
</screen>
  </para>

  <para>
    In this section we discuss how we setup a basic Linux
    node that we use to develop our puppet code and
    configuration on. After we have created the bare Linux
    node, as is shown in <xref
    linkend="software-test-bare"/>, we want to install a
    number of RPM packages and setup some configuration. We
    need the following items:
    <itemizedlist>
      <listitem>
        <para>
          <package>vim-enhanced</package>
        </para>
      </listitem>
      <listitem>
        <para>
          <package>rsync</package>
        </para>
      </listitem>
      <listitem>
        <para>
          <package>puppet</package>
        </para>
      </listitem>
      <listitem>
        <para>
          <package>tree</package>
        </para>
      </listitem>
      <listitem>
        <para>
          <package>man</package>
        </para>
      </listitem>
      <listitem>
        <para>
          <package>mlocate</package>
        </para>
      </listitem>
      <listitem>
        <para>
          <package>git</package>
        </para>
      </listitem>
      <listitem>
        <para>
          <package>rpm-build</package>
        </para>
      </listitem>
      <listitem>
        <para>
          <package>rpmlint</package>
        </para>
      </listitem>
      <listitem>
        <para>
          Public SSH key of our host in the
          <filename>~/.ssh/authorized_keys</filename> of the
          bare Linux node.
        </para>
      </listitem>
      <listitem>
        <para>
          The <application>vim</application> configuration
          of our host in <filename
          class="directory">~/.vim/</filename>.
        </para>
      </listitem>
      <listitem>
        <para>
          The <application>GPG</application> keypair of our
          host in <filename
          class="directory">~/.gnupg</filename> for signing
          RPM's.
        </para>
      </listitem>
      <listitem>
        <para>
          The <application>RPM</application> macro's of our
          host in <filename
          class="directory">~/.rpmmacros</filename> for
          building and signing RPM's.
        </para>
      </listitem>
      <listitem>
        <para>
          The <application>git</application> configuration
          of our host.
        </para>
      </listitem>
    </itemizedlist>
  </para>

  <para>
    The RPM packages can be installed with:
<screen>
&t1p; <userinput>yum install vim-enhanced rsync puppet tree man mlocate git rpm-build rpmlint</userinput>  
.. output skipped ..
</screen>
  </para>

  <para>
    All the custom vim settings on our host are copied to
    the Puppet development machine with:
<screen>
&uhp; <userinput>rsync -au ~/.vim root@192.168.5.14:</userinput>
</screen>
  </para>

  <para>
    The GPG keypair on our host is copied to the Puppet
    development machine with:
<screen>
&uhp; <userinput>gpg --list-keys</userinput>
/home/allard/.gnupg/pubring.gpg
-------------------------------
pub   1024D/F59006AF 2014-06-08
uid                  Example (Example RPM signing)

&uhp; <userinput>gpg --export-secret-keys --output /tmp/a --armor 'Example (Example RPM signing)'</userinput>

&uhp; <userinput>cat /tmp/a</userinput>
-----BEGIN PGP PRIVATE KEY BLOCK-----
Version: GnuPG v1

lQHhBFOUhnERBADkf/zzmYfRCqtuDaXHxTBtfQn80xiaabf/i0EwmrGe08iApvY5
0HnsvawsIyrv6xfgLHRWMIMVJmcskH/mt4yCH1W5y/BPi12bsRANxpxYIPvWN4sx
rogTr1o1Hf2ePu4uxCreIVpS1h8KABQsRgFnLa7OeQM4IF5uv/v6H6cOCwCg90ru
IT0dK4c/37szTy1tF5DDONMEAKXpC2zAgZT+U4D/b6q7Jl3AMps35MgBA3Bty0G/
r0HDKTh8ZFvX3nfI3jmbwQOeuk3VF4N85dHczivPVS49nExQ07N0p+Z2IqG5n4c4
v8wCh3ZkcK7h+ctwYII6jLruJ/jCp12MeH5uNGfgWRtt2VE4d6bEdO5KgOensOoU
/4ygA/43E7f1qyb7YEk29ZE/k+H1gPGQBWD1ncQDUyVE9e/pWP7zdm40qU22+Y7t
IIFvyHcy1EN5jDYjICcvXG1T8WcwicjxezBdORoezuf9+DP2ipEtRlpLe8ePckYM
xFpxYRdL9gTp2DSkjivPheCsY7F7X4PEeMR1IpqHocTfoGEDrP4DAwIf2jfNwUWI
mWCRWuAV1Cj3aZgedCa/jnihV2puCbsjMMNasEB1SUq3r8prHJ5zNaegWLjqS0Pr
UUpXgbQdRXhhbXBsZSAoRXhhbXBsZSBSUE0gc2lnbmluZymIYgQTEQIAIgUCU5SG
cQIbAwYLCQgHAwIGFQgCCQoLBBYCAwECHgECF4AACgkQFp9KyvWQBq8hNgCeM+Za
Ty9eWuAqhozUB1YSdGe0lZoAn391msW5Kog/ywW9FTMFFztsFh4v
=ZF3J
-----END PGP PRIVATE KEY BLOCK-----

&uhp; <userinput>scp /tmp/a root@192.168.5.14:</userinput>
a                                             100%  932     0.9KB/s   00:00

&t1p; <userinput>gpg --import /tmp/a</userinput>
gpg: directory `/root/.gnupg' created
gpg: new configuration file `/root/.gnupg/gpg.conf' created
gpg: WARNING: options in `/root/.gnupg/gpg.conf' are not yet active during this run
gpg: keyring `/root/.gnupg/secring.gpg' created
gpg: keyring `/root/.gnupg/pubring.gpg' created
gpg: key F59006AF: secret key imported
gpg: /root/.gnupg/trustdb.gpg: trustdb created
gpg: key F59006AF: public key "Example (Example RPM signing)" imported
gpg: Total number processed: 1
gpg:               imported: 1
gpg:       secret keys read: 1
gpg:   secret keys imported: 1

&t1p; <userinput>gpg --list-keys</userinput>
/root/.gnupg/pubring.gpg
------------------------
pub   1024D/F59006AF 2014-06-08
uid                  Example (Example RPM signing)
</screen>
  </para>

  <para>
    The RPM macro's settings:
<screen>
&t1p; <userinput>cat ~/.rpmmacros</userinput>
%_topdir       %{getenv:HOME}/rpm
%_tmppath      %{_topdir}/tmp
%_signature    gpg
%_gpg_name     Example (Example RPM signing)
%_gpg_path     ~/.gnupg
</screen>
  </para>

  <para>
    The <application>git</application> configuration:
<screen>
&t1p; <userinput>git config --global user.name "Allard Berends"</userinput>
&t1p; <userinput>git config --global user.email "aberends@example.com"</userinput>
&t1p; <userinput>git config --global core.editor vim</userinput>
&t1p; <userinput>git config --global merge.tool vimdiff</userinput>
</screen>
  </para>

  <para>
    Since this is our Puppet development node, we want to
    enrich it with some aliases to speed up our workflow:
<screen>
&t1p; <userinput>cat ~/.bashrc</userinput>
# .bashrc

# User specific aliases and functions

# Source global definitions
if [ -f /etc/bashrc ]; then
        . /etc/bashrc
fi

# Path aliases.
alias bi='cd ~/puppet-baseinfra/puppet-baseinfra'
alias dms='cd ~/puppet-dmsat1/puppet-dmsat1'
alias hier='cd ~/puppet-structure/puppet-structure/var/lib/hiera'
alias ipt='cd ~/puppet-baseinfra/puppet-baseinfra/etc/puppet/modules/iptables/manifests'
alias lb='cd ~/puppet-baseinfra/puppet-baseinfra/etc/puppet/modules/lvs/manifests'
alias ldap='cd ~/puppet-baseinfra/puppet-baseinfra/etc/puppet/modules/ldap/manifests'
alias mod='cd ~/puppet-baseinfra/puppet-baseinfra/etc/puppet/modules'
alias nodes='cd /var/lib/hiera/depzones/dmsat1/hosts/'
alias ntp='cd ~/puppet-baseinfra/puppet-baseinfra/etc/puppet/modules/ntp/manifests'
alias pst='cd ~/puppet-structure/puppet-structure'
alias sup='cd ~/puppet-baseinfra/puppet-baseinfra/etc/puppet/modules/support6/manifests'
alias tst='cd ~/puppet-baseinfra/puppet-baseinfra/etc/puppet/modules/test/manifests'
</screen>
  </para>

</section>
