<?xml version='1.0' encoding='utf-8' ?>
<!DOCTYPE section PUBLIC "-//OASIS//DTD DocBook XML V4.5//EN" "http://www.oasis-open.org/docbook/xml/4.5/docbookx.dtd" [
<!ENTITY % BOOK_ENTITIES SYSTEM "../../puppet-guide.ent">
%BOOK_ENTITIES;
]>
<section id="environment-development-devnode">
  <title>Development node</title>

  <table id="environment-development-devnode-prerequisites">
    <title>Prerequisites</title>
    <tgroup align="left" cols="2" colsep="1" rowsep="1">
      <colspec colname="c1" colnum="1" colwidth="1*"></colspec>
      <colspec colname="c2" colnum="2" colwidth="1*"></colspec>
      <thead valign="top">
        <row>
          <entry>item</entry>
          <entry>description</entry>
        </row>
      </thead>
      <tbody valign="top">
        <row>
          <entry>core network</entry>
          <entry>See <xref
          linkend="environment-development-devnetwork" /> how
          it is created</entry>
        </row>
        <row>
          <entry>dev1 node</entry>
          <entry>See <xref
          linkend="platforms-dev-dev1" /> how
          it is created</entry>
        </row>
      </tbody>
    </tgroup>
  </table>

  <para>
    In the table above it is explained what we need to get
    the development node alive. Make sure that the
    prerequisites are filled in. The development node is
    equipped with a basic OS, nothing else.
  </para>

  <para>
    The SSH public key authentication mechanism makes it
    easy for us to reach the development node. The public
    SSH key of our host is copied with:
<screen>
&uhp; <userinput>ssh-copy-id root@192.168.4.22</userinput>
/usr/bin/ssh-copy-id: INFO: attempting to log in with the new key(s), to filter out any that are already installed
/usr/bin/ssh-copy-id: INFO: 2 key(s) remain to be installed -- if you are prompted now it is to install the new keys
Warning: Permanently added '192.168.4.22' (RSA) to the list of known hosts.
root@192.168.4.22's password: <userinput>redhat</userinput>

Number of key(s) added: 2

Now try logging into the machine, with:   "ssh 'root@192.168.4.22'"
and check to make sure that only the key(s) you wanted were added.

&uhp; <userinput>ssh 'root@192.168.4.22'</userinput>
.. works ..
</screen>
  </para>

  <para>
    After we have created the bare Linux node, we want to
    install a number of RPM packages and setup some
    configuration. We need the following items:
    <itemizedlist>
      <listitem>
        <para>
          <package>vim-enhanced</package>
        </para>
      </listitem>
      <listitem>
        <para>
          <package>rsync</package>
        </para>
      </listitem>
      <listitem>
        <para>
          <package>puppet</package>
        </para>
      </listitem>
      <listitem>
        <para>
          <package>puppet-stdlib</package>, see <xref
          linkend="puppet_construction-stdlib" />
        </para>
      </listitem>
      <listitem>
        <para>
          <package>puppet-gpgme</package>, see <xref
          linkend="puppet_construction-gpgme" />
        </para>
      </listitem>
      <listitem>
        <para>
          <package>puppet-lint</package>, see <xref
          linkend="puppet_construction-puppet_lint" />
        </para>
      </listitem>
      <listitem>
        <para>
          <package>tree</package>
        </para>
      </listitem>
      <listitem>
        <para>
          <package>man</package>
        </para>
      </listitem>
      <listitem>
        <para>
          <package>mlocate</package>
        </para>
      </listitem>
      <listitem>
        <para>
          <package>git</package>
        </para>
      </listitem>
      <listitem>
        <para>
          <package>rpm-build</package>
        </para>
      </listitem>
      <listitem>
        <para>
          <package>rpmlint</package>
        </para>
      </listitem>
      <listitem>
        <para>
          Public SSH key of our host in the
          <filename>~/.ssh/authorized_keys</filename> of the
          bare Linux node.
        </para>
      </listitem>
      <listitem>
        <para>
          The <application>vim</application> configuration
          of our host in <filename
          class="directory">~/.vim/</filename>.
        </para>
      </listitem>
      <listitem>
        <para>
          The <application>GPG</application> keypair of our
          host in <filename
          class="directory">~/.gnupg</filename> for signing
          RPM's.
        </para>
      </listitem>
      <listitem>
        <para>
          The <application>RPM</application> macro's of our
          host in <filename
          class="directory">~/.rpmmacros</filename> for
          building and signing RPM's.
        </para>
      </listitem>
      <listitem>
        <para>
          The <application>git</application> configuration
          of our host.
        </para>
      </listitem>
    </itemizedlist>
  </para>

  <para>
    The RPM packages are installed with:
<screen>
&dev1p; <userinput>yum install vim-enhanced rsync puppet puppet-stdlib puppet-gpgme puppet-lint tree man mlocate git rpm-build rpmlint</userinput>  
No package puppet-stdlib available.
No package puppet-gpgme available.
No package puppet-lint available.
.. output skipped ..
</screen>
    Note, initially we don't have the packages
    <package>puppet-stdlib</package>,
    <package>puppet-gpgme</package> and
    <package>puppet-lint</package>. In <xref
    linkend="puppet_construction" /> the details are
    provided how to build these RPM's on the <systemitem
    class="systemname">dev1.core.dmsat1.org</systemitem>
    node. For now, it is not a problem that we lack these
    packages!
  </para>

  <para>
    All the custom vim settings on our host are copied to
    the Puppet development machine with:
<screen>
&uhp; <userinput>rsync -au ~/.vim root@192.168.4.22:</userinput>
</screen>
  </para>

  <para>
    The GPG keypair on our host is copied to the Puppet
    development machine with:
<screen>
&uhp; <userinput>gpg --list-keys</userinput>
/home/allard/.gnupg/pubring.gpg
-------------------------------
pub   1024D/F59006AF 2014-06-08
uid                  Example (Example RPM signing)

&uhp; <userinput>gpg --export-secret-keys --output /tmp/a --armor 'Example (Example RPM signing)'</userinput>

&uhp; <userinput>cat /tmp/a</userinput>
-----BEGIN PGP PRIVATE KEY BLOCK-----
Version: GnuPG v1

lQHhBFOUhnERBADkf/zzmYfRCqtuDaXHxTBtfQn80xiaabf/i0EwmrGe08iApvY5
0HnsvawsIyrv6xfgLHRWMIMVJmcskH/mt4yCH1W5y/BPi12bsRANxpxYIPvWN4sx
rogTr1o1Hf2ePu4uxCreIVpS1h8KABQsRgFnLa7OeQM4IF5uv/v6H6cOCwCg90ru
IT0dK4c/37szTy1tF5DDONMEAKXpC2zAgZT+U4D/b6q7Jl3AMps35MgBA3Bty0G/
r0HDKTh8ZFvX3nfI3jmbwQOeuk3VF4N85dHczivPVS49nExQ07N0p+Z2IqG5n4c4
v8wCh3ZkcK7h+ctwYII6jLruJ/jCp12MeH5uNGfgWRtt2VE4d6bEdO5KgOensOoU
/4ygA/43E7f1qyb7YEk29ZE/k+H1gPGQBWD1ncQDUyVE9e/pWP7zdm40qU22+Y7t
IIFvyHcy1EN5jDYjICcvXG1T8WcwicjxezBdORoezuf9+DP2ipEtRlpLe8ePckYM
xFpxYRdL9gTp2DSkjivPheCsY7F7X4PEeMR1IpqHocTfoGEDrP4DAwIf2jfNwUWI
mWCRWuAV1Cj3aZgedCa/jnihV2puCbsjMMNasEB1SUq3r8prHJ5zNaegWLjqS0Pr
UUpXgbQdRXhhbXBsZSAoRXhhbXBsZSBSUE0gc2lnbmluZymIYgQTEQIAIgUCU5SG
cQIbAwYLCQgHAwIGFQgCCQoLBBYCAwECHgECF4AACgkQFp9KyvWQBq8hNgCeM+Za
Ty9eWuAqhozUB1YSdGe0lZoAn391msW5Kog/ywW9FTMFFztsFh4v
=ZF3J
-----END PGP PRIVATE KEY BLOCK-----

&uhp; <userinput>scp /tmp/a root@192.168.4.22:</userinput>
a                                             100%  932     0.9KB/s   00:00

&dev1p; <userinput>gpg --import a</userinput>
gpg: directory `/root/.gnupg' created
gpg: new configuration file `/root/.gnupg/gpg.conf' created
gpg: WARNING: options in `/root/.gnupg/gpg.conf' are not yet active during this run
gpg: keyring `/root/.gnupg/secring.gpg' created
gpg: keyring `/root/.gnupg/pubring.gpg' created
gpg: key F59006AF: secret key imported
gpg: /root/.gnupg/trustdb.gpg: trustdb created
gpg: key F59006AF: public key "Example (Example RPM signing)" imported
gpg: Total number processed: 1
gpg:               imported: 1
gpg:       secret keys read: 1
gpg:   secret keys imported: 1

&dev1p; <userinput>gpg --list-keys</userinput>
/root/.gnupg/pubring.gpg
------------------------
pub   1024D/F59006AF 2014-06-08
uid                  Example (Example RPM signing)
</screen>
  </para>

  <para>
    The RPM macro's settings:
<screen>
&dev1p; <userinput>cat ~/.rpmmacros</userinput>
%_topdir       %{getenv:HOME}/rpm
%_tmppath      %{_topdir}/tmp
%_signature    gpg
%_gpg_name     Example (Example RPM signing)
%_gpg_path     ~/.gnupg
</screen>
  </para>

  <para>
    Note, we show an example configuration below. Please
    make sure to adapt <emphasis
    role="strong">user.name</emphasis> and <emphasis
    role="strong">user.email</emphasis> to reflect your own
    information. The <application>git</application>
    configuration:
<screen>
&dev1p; <userinput>git config --global user.name "Allard Berends"</userinput>
&dev1p; <userinput>git config --global user.email "aberends@example.com"</userinput>
&dev1p; <userinput>git config --global core.editor vim</userinput>
&dev1p; <userinput>git config --global merge.tool vimdiff</userinput>
</screen>
  </para>

  <para>
    To easily communicate with <ulink
    url="https://github.com/aberends">github.com/aberends</ulink>,
    we need an SSH key on the development node:
<screen>
&dev1p; <userinput>ssh-keygen</userinput>
Generating public/private rsa key pair.
Enter file in which to save the key (/root/.ssh/id_rsa): 
Enter passphrase (empty for no passphrase): 
Enter same passphrase again: 
Your identification has been saved in /root/.ssh/id_rsa.
Your public key has been saved in /root/.ssh/id_rsa.pub.
The key fingerprint is:
60:68:c3:55:f2:20:e0:59:fd:dd:7d:f7:84:3f:c7:c2 root@dev1.core.dmsat1.org
The key's randomart image is:
+--[ RSA 2048]----+
|  ..o.+..        |
| . + +.+         |
|  o = o... . . . |
|   . o .. . . o +|
|        S    . =o|
|              E.=|
|               .o|
|                 |
|                 |
+-----------------+
</screen>
    Note, the name <emphasis
    role="strong">aberends</emphasis> must be replaced with
    your own git login name! Place the public part of the
    SSH key in github, under your account settings.
<screen>
&dev1p; <userinput>cat ~/.ssh/id_rsa.pub</userinput>
ssh-rsa AAAAB3NzaC1yc2EAAAABIwAAAQEAqiCDYGrbcjzRvnWLBbfC5jL0PhNOdbhXPljTcnOUCr2kU5kvwRp/WlC5fGhWt/mWBGcqg5F0VxqfZ+1ooR9SzFfhqrN4MGAwyb7fgvJvPC3xKyhw9mOrrXTsXKOOWQ1QzNKgtWzV8RR54lRT3RzcAEAxMZtXGp07hj45g4gHKg+wRmFBCsVs5HXLmtYT4IHpIhDsrMQVpTjwxOdothpjnjqKuSIPu6SDT2JwGLWFxDj9km/e+hRqVhrx60pFCzXfLq869TxsEaUC1yXeU04bKdt0Mc2wUMLL70ZLiiCs6zJ/haq/GurfueJtqWFoQT8TmPUTuPmkENSBbx3G+sK9zw== root@dev1.core.dmsat1.org
</screen>
  </para>

  <para>
    Since this is our Puppet development node, we want to
    enrich it with some aliases to speed up our workflow:
<screen>
&dev1p; <userinput>cat ~/.bashrc</userinput>
# .bashrc

# User specific aliases and functions

# Source global definitions
if [ -f /etc/bashrc ]; then
        . /etc/bashrc
fi

# Command aliases.
alias puppet-lint='puppet-lint --no-class_inherits_from_params_class-check --no-variable_scope-check'

# Path aliases.
alias dev='cd /etc/puppet/modules/dev/manifests'
alias dms='cd ~/puppet-dmsat1/puppet-dmsat1'
alias dns='cd /etc/puppet/modules/dns/manifests'
alias hier='cd /var/lib/hiera'
alias hosts='cd /var/lib/hiera/depzones/dmsat1/hosts'
alias ipt='cd ~/puppet-baseinfra/puppet-baseinfra/etc/puppet/modules/iptables/manifests'
alias lb='cd ~/puppet-baseinfra/puppet-baseinfra/etc/puppet/modules/lvs/manifests'
alias ldap='cd /etc/puppet/modules/ldap/manifests'
alias mod='cd /etc/puppet/modules'
alias nodes='cd /var/lib/hiera/depzones/dmsat1/hosts/'
alias ntp='cd /etc/puppet/modules/ntp/manifests'
alias pbi='cd ~/puppet-baseinfra'
alias pcd='cd ~/puppet-conf-dmsat1'
alias prof='cd /etc/puppet/modules/profiles/manifests'
alias prov='cd /etc/puppet/modules/prov/manifests'
alias pso='cd ~/puppet-software'
alias pst='cd ~/puppet-structure'
alias pto='cd ~/puppet-tools'
alias role='cd /etc/puppet/modules/roles/manifests'
alias sup='cd ~/puppet-baseinfra/puppet-baseinfra/etc/puppet/modules/support6/manifests'
alias tst='cd ~/puppet-baseinfra/puppet-baseinfra/etc/puppet/modules/test/manifests'
</screen>
  </para>

  <para>
    This concludes setting up the development infrastructure
    and the development node. We have used the <systemitem
    class="systemname">dev1.core.dmsat1.org</systemitem>
    node to develop the different Puppet configurable
    standard services. The git repositories are:

    <table id="environment-development-devnode-gits">
      <title>Git repositories</title>
      <tgroup align="left" cols="2" colsep="1" rowsep="1">
        <colspec colname="c1" colnum="1" colwidth="1*"></colspec>
        <colspec colname="c2" colnum="2" colwidth="1*"></colspec>
        <thead valign="top">
          <row>
            <entry>repo</entry>
            <entry>description</entry>
          </row>
        </thead>
        <tbody valign="top">
          <row>
            <entry>
              <xref
              linkend="puppet-guide-ref_material-puppet-baseinfra"
              />
            </entry>
            <entry>
              Puppet building blocks (modules) for
              configuring Linux nodes to provide the default
              services.
            </entry>
          </row>
          <row>
            <entry>
              <xref
              linkend="puppet-guide-ref_material-puppet-conf-dmsat1"
              />
            </entry>
            <entry>
              Puppet configuration in YAML files used in the
              <emphasis role="strong">dmsat1</emphasis>
              deployment zone
            </entry>
          </row>
          <row>
            <entry>
              <xref
              linkend="puppet-guide-ref_material-puppet-software"
              />
            </entry>
            <entry>
              Software used by Puppet for extra functions
            </entry>
          </row>
          <row>
            <entry>
              <xref
              linkend="puppet-guide-ref_material-puppet-structure"
              />
            </entry>
            <entry>
              Configuration and structure of Puppet itself
            </entry>
          </row>
          <row>
            <entry>
              <xref
              linkend="puppet-guide-ref_material-puppet-tools"
              />
            </entry>
            <entry>
              Software tools to support Puppet functions
            </entry>
          </row>
        </tbody>
      </tgroup>
    </table>

  </para>

  <para>
    In <xref linkend="platforms" />, we show how to install
    all the nodes in <emphasis>dmsat1</emphasis>.
  </para>

</section>
