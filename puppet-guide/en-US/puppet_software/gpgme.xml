<?xml version='1.0' encoding='utf-8' ?>
<!DOCTYPE section PUBLIC "-//OASIS//DTD DocBook XML V4.5//EN" "http://www.oasis-open.org/docbook/xml/4.5/docbookx.dtd" [
<!ENTITY % BOOK_ENTITIES SYSTEM "../puppet-guide.ent">
%BOOK_ENTITIES;
]>
<section id="puppet_construction-gpgme">
  <title>Puppet gpgme RPM</title>

  <para>
    On a test installtion of the <systemitem
    class="systemname">rpm1.core.dmsat1.org</systemitem>, we
    install the <application>gpgme</application> application.
    After testing the functionality, we copy the files we
    need to the development node and build an RPM. After
    doing a second test installation of <systemitem
    class="systemname">rpm1.core.dmsat1.org</systemitem>, we
    verify if the RPM provides the same functionality.
<screen>
&rpm1p; <userinput>yum install tree vim-enhanced rsync</userinput>
.. output skipped ..
&rpm1p; <userinput>yum install ruby-devel libassuan-devel gpgme-devel gcc</userinput>
.. output skipped ..
&rpm1p; <userinput>gem install gpgme</userinput>
.. output skipped ..
</screen>
  </para>

  <para>
    We test the <application>gpgme</application> application
    with:
<screen>
&hostp; <userinput>rsync -au /home/allard/.gnugp root@192.168.4.20:</userinput>

&rpm1p; <userinput>cat show_gpg_key.rb</userinput>
#!/usr/bin/ruby

require 'rubygems'
require 'gpgme'

GPGME::Engine.home_dir = '/root/.gnupg'
ctx = GPGME::Ctx.new
ctx.each_key(ARGV.shift) do |key|
  #puts(key) if /^uid/ =~ key.to_s()
  puts "#{key.name()} (#{key.comment()})"
  break
end
&rpm1p; <userinput>./show_gpg_key.rb</userinput>
Example (Example RPM signing)
</screen>
  </para>

  <para>
    Now, we copy all the parts we need for the
    <package>puppet-gpgme</package> RPM:
<screen>
&rpm1p; <userinput>find / \( -wholename /dev -o -wholename /proc -o -wholename /sys \) -prune -o -mmin -2 -print</userinput>
.. do some clever analysis ..
&rpm1p; <userinput>mkdir -p ~/puppet-gpgme</userinput>
&rpm1p; <userinput>cd ~/puppet-gpgme</userinput>
&rpm1p; <userinput>rsync -aR /usr/lib/ruby/gems/1.8/gems/gpgme-2.0.6/examples .</userinput>
&rpm1p; <userinput>rsync -aR /usr/lib/ruby/gems/1.8/gems/gpgme-2.0.6/ext .</userinput>
&rpm1p; <userinput>rsync -aR /usr/lib/ruby/gems/1.8/gems/gpgme-2.0.6/lib .</userinput>
&rpm1p; <userinput>rsync -aR /usr/lib/ruby/gems/1.8/gems/gpgme-2.0.6/test .</userinput>
&rpm1p; <userinput>rsync -aR /usr/lib/ruby/gems/1.8/doc/gpgme-2.0.6 .</userinput>

&dev1p; <userinput>mkdir -p ~/puppet-software/puppet-gpgme/puppet-gpgme</userinput>
&dev1p; <userinput>cd ~/puppet-software/puppet-gpgme/puppet-gpgme</userinput>
&dev1p; <userinput>rsync -au root@192.168.4.20:/root/puppet-gpgme/usr .</userinput>
</screen>
  </para>

  <para>
<screen>
&dev1p; <userinput>cat ~/puppet-software/puppet-gpgme/build.sh</userinput>
#!/bin/bash
RPM=puppet-gpgme
tar -cz --exclude=.git -f ~/rpm/SOURCES/${RPM}.tar.gz ${RPM}
rpmbuild --target x86_64 --clean -bb ${RPM}.spec
RC=$?
if [ $RC -ne 0 ]; then
  echo "ERROR: rpmbuild failed with exit code: $RC"
fi
rm ~/rpm/SOURCES/${RPM}.tar.gz
exit $RC

&dev1p; <userinput>cat ~/puppet-software/puppet-gpgme/puppet-gpgme.spec</userinput>
Name:         puppet-gpgme
Version:      0.1.1
Release:      1
Summary:      Puppet gpgme
Group:        Applications/System
License:      GPL
Vendor:       MSAT
Source:       %{name}.tar.gz
BuildRoot:    %{_tmppath}/%{name}-root
Requires:     puppet
Requires:     puppet-mini_portile

%description
This package contains the result of:
yum install ruby-devel libassuan-devel gpgme-devel gcc
gem install gpgme

mkdir -p ~/puppet-software/puppet-gpgme/puppet-gpgme/
rsync -aR /usr/lib/ruby/gems/1.8/gems/gpgme-2.0.6/examples \
    ~/puppet-software/puppet-gpgme/puppet-gpgme/
rsync -aR /usr/lib/ruby/gems/1.8/gems/gpgme-2.0.6/ext \
    ~/puppet-software/puppet-gpgme/puppet-gpgme/
rsync -aR /usr/lib/ruby/gems/1.8/gems/gpgme-2.0.6/lib \
    ~/puppet-software/puppet-gpgme/puppet-gpgme/
rsync -aR /usr/lib/ruby/gems/1.8/gems/gpgme-2.0.6/test \
    ~/puppet-software/puppet-gpgme/puppet-gpgme/
rsync -aR /usr/lib/ruby/gems/1.8/doc/gpgme-2.0.6 \
    ~/puppet-software/puppet-gpgme/puppet-gpgme/

%prep
%setup -q -n %{name}

%build
# Empty.

%install
rm -rf $RPM_BUILD_ROOT
mkdir $RPM_BUILD_ROOT
cp -R usr $RPM_BUILD_ROOT

%clean
rm -rf $RPM_BUILD_ROOT

%pre
# Empty.

%post
# Empty.

%preun
# Empty.

%postun
# Empty.

%files
%defattr(0644,root,root)
%dir /usr/lib/ruby/gems/1.8/doc/gpgme-2.0.6
/usr/lib/ruby/gems/1.8/doc/gpgme-2.0.6/rdoc
/usr/lib/ruby/gems/1.8/doc/gpgme-2.0.6/ri
%dir /usr/lib/ruby/gems/1.8/gems/gpgme-2.0.6
/usr/lib/ruby/gems/1.8/gems/gpgme-2.0.6/examples
/usr/lib/ruby/gems/1.8/gems/gpgme-2.0.6/ext
/usr/lib/ruby/gems/1.8/gems/gpgme-2.0.6/lib
/usr/lib/ruby/gems/1.8/gems/gpgme-2.0.6/test

%changelog
* Tue Jul 22 2014 Allard Berends &lt;allard.berends@example.com&gt; - 0.1.1-1
- Initial creation of the RPM
</screen>
  </para>

  <para>
    All parts are done. Now we build the RPM:
<screen>
&dev1p; <userinput>cd ~/puppet-software/puppet-gpgme</userinput>
&dev1p; <userinput>./build.sh</userinput>
.. output skipped ..
</screen>
  </para>

  <para>
    The second round of testing:
<screen>
&hostp; <userinput>rsync -au /home/allard/.gnugp root@192.168.4.20:</userinput>

&rpm1p; <userinput>cat show_gpg_key.rb</userinput>
#!/usr/bin/ruby

require 'rubygems'
require 'gpgme'

GPGME::Engine.home_dir = '/root/.gnupg'
ctx = GPGME::Ctx.new
ctx.each_key(ARGV.shift) do |key|
  #puts(key) if /^uid/ =~ key.to_s()
  puts "#{key.name()} (#{key.comment()})"
  break
end
&rpm1p; <userinput>./show_gpg_key.rb</userinput>
Example (Example RPM signing)
</screen>
    So, we conclude that the RPM works correctly. We still
    need to load it in the Spacewalk server.
  </para>

  <para>
<screen>
&sw1p; <userinput>rhnpush -c example-puppet-software-6u5-1_0 -u example -p redhat puppet-gpgme-0.1.1-1.x86_64.rpm</userinput>
</screen>    
  </para>

</section>
